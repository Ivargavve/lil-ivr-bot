#!/usr/bin/env python3
"""
Test Swedish lyrics integration and Swedish language validation
"""

import sys
import re
sys.path.append('backend')

def test_swedish_lyrics():
    print("üß™ Testing Swedish Lyrics Integration")
    print("=" * 40)

    # Test 1: Lyrics file content
    print("\n1Ô∏è‚É£ Testing lyrics file content...")
    try:
        from main import load_song_lyrics, get_random_lyric

        lyrics = load_song_lyrics()
        print(f"‚úÖ Loaded {len(lyrics)} lyric lines")

        # Test each lyric line
        swedish_keywords = [
            'jag', '√§r', 'min', 'och', 'det', 'fr√•n', 'till', 'som', 'f√∂r', 'dom',
            'stockholm', 'g√∂teborg', 'malm√∂', 'ume√•', 'svenska', 'bror', 'ass√•'
        ]

        rapper_keywords = [
            'beats', 'flow', 'trap', 'studio', 'bars', 'mic', 'sound', 'track',
            'king', 'rapper', 'game', 'drop', 'stream', 'spotify'
        ]

        for i, lyric in enumerate(lyrics[:10], 1):  # Test first 10 lines
            print(f"  üìù Line {i}: {lyric[:60]}...")

            # Check for Swedish words
            has_swedish = any(word.lower() in lyric.lower() for word in swedish_keywords)

            # Check for rapper terms
            has_rapper = any(word.lower() in lyric.lower() for word in rapper_keywords)

            print(f"      Swedish: {'‚úÖ' if has_swedish else '‚ö†Ô∏è'}, Rapper: {'‚úÖ' if has_rapper else '‚ö†Ô∏è'}")

    except Exception as e:
        print(f"‚ùå Lyrics file error: {e}")

    # Test 2: Random lyric selection
    print("\n2Ô∏è‚É£ Testing random lyric selection...")
    try:
        # Test multiple random selections
        selected_lyrics = set()
        for i in range(20):
            lyric = get_random_lyric()
            selected_lyrics.add(lyric)

        print(f"‚úÖ Generated {len(selected_lyrics)} unique lyrics from {len(lyrics)} total")

        # Show some examples
        for i, lyric in enumerate(list(selected_lyrics)[:3], 1):
            print(f"  üéµ Example {i}: {lyric}")

    except Exception as e:
        print(f"‚ùå Random selection error: {e}")

    # Test 3: Lyric integration probability
    print("\n3Ô∏è‚É£ Testing lyric integration probability...")
    try:
        from main import should_include_lyric

        # Test probability distribution
        include_count = 0
        total_tests = 1000

        for _ in range(total_tests):
            if should_include_lyric():
                include_count += 1

        probability = include_count / total_tests
        print(f"‚úÖ Lyric inclusion rate: {probability:.1%}")
        print(f"  Expected: ~20%, Actual: {probability:.1%}")

        if 0.15 <= probability <= 0.25:
            print("  ‚úÖ Probability within expected range")
        else:
            print("  ‚ö†Ô∏è Probability outside expected range")

    except Exception as e:
        print(f"‚ùå Probability test error: {e}")

    # Test 4: Character validation
    print("\n4Ô∏è‚É£ Testing Swedish character support...")
    try:
        swedish_chars = ['√•', '√§', '√∂', '√Ö', '√Ñ', '√ñ']
        found_chars = set()

        for lyric in lyrics:
            for char in swedish_chars:
                if char in lyric:
                    found_chars.add(char)

        print(f"‚úÖ Found Swedish characters: {', '.join(sorted(found_chars))}")

        if len(found_chars) >= 3:
            print("  ‚úÖ Good Swedish character usage")
        else:
            print("  ‚ö†Ô∏è Limited Swedish character usage")

    except Exception as e:
        print(f"‚ùå Character validation error: {e}")

    # Test 5: Lyric formatting in messages
    print("\n5Ô∏è‚É£ Testing lyric formatting in chat messages...")
    try:
        test_lyric = "Yo jag k√∂r beats hela dagen, skibidi p√• repeat"
        formatted_lyric = f"Btw, fr√•n min senaste track: '{test_lyric}' üé§"

        # Test if the format matches what's expected in the frontend
        expected_pattern = r"Btw, fr√•n min senaste track: '.*' üé§"

        if re.match(expected_pattern, formatted_lyric):
            print("‚úÖ Lyric formatting matches expected pattern")
            print(f"  üìù Example: {formatted_lyric}")
        else:
            print("‚ùå Lyric formatting doesn't match pattern")

        # Test length
        if len(formatted_lyric) <= 200:
            print("‚úÖ Formatted lyric length acceptable")
        else:
            print("‚ö†Ô∏è Formatted lyric might be too long")

    except Exception as e:
        print(f"‚ùå Formatting test error: {e}")

    # Test 6: Goofy/slang terms validation
    print("\n6Ô∏è‚É£ Testing goofy slang terms...")
    try:
        goofy_terms = ['skibidi', 'bop', 'sick', 'tight', 'fly', 'glow', 'vibe']
        found_terms = []

        all_lyrics_text = ' '.join(lyrics).lower()

        for term in goofy_terms:
            if term in all_lyrics_text:
                found_terms.append(term)

        print(f"‚úÖ Found goofy terms: {', '.join(found_terms)}")

        if len(found_terms) >= 2:
            print("  ‚úÖ Good use of goofy slang")
        else:
            print("  ‚ö†Ô∏è Could use more goofy slang terms")

    except Exception as e:
        print(f"‚ùå Slang validation error: {e}")

    print("\n" + "=" * 40)
    print("üèÅ Swedish lyrics integration testing complete!")

if __name__ == "__main__":
    test_swedish_lyrics()